#include "cuda_runtime.h"
#include "device_launch_parameters.h"
#include <cstdio>

void DeviceOutput(cudaDeviceProp &prop)
{
	printf("CUDA Device info:\n");
	printf("Name: %s\n", prop.name);
	printf("Architecture: %d.%d\n", prop.major, prop.minor);
	printf("Clockrate: %d Mhz\n", prop.clockRate / 1000);
	printf("Globalmem: %ld Mbytes\n", prop.totalGlobalMem / (1024 * 1024));
	printf("SharedmemPerBlock: %ld Kbytes\n", prop.sharedMemPerBlock / 1024);
	printf("multiProcessors: %d\n", prop.multiProcessorCount);
	printf("WarpSize: %d\n", prop.warpSize);
	printf("ThreadsPerBlock: %d\n", prop.maxThreadsPerBlock);
	printf("Maximum Grid Size: (%d, %d, %d)\n", prop.maxGridSize[0], prop.maxGridSize[1], prop.maxGridSize[2]);
	printf("Maximum Block Size: (%d, %d, %d)\n", prop.maxThreadsDim[0], prop.maxThreadsDim[1], prop.maxThreadsDim[2]);
}

int main()
{
	cudaDeviceProp prop;
	int count;
	cudaError_t cudaStatus;
	cudaStatus = cudaGetDeviceCount(&count);
	if (cudaStatus != cudaSuccess)
	{
		fprintf(stderr, "cudaGetDeviceCount failed!\n");
		return -1;
	}
	printf("%d devices was found\n", count);
	for (int i = 0; i < count; i++)
	{
		cudaStatus = cudaGetDeviceProperties(&prop, i);
		if (cudaStatus != cudaSuccess)
		{
			fprintf(stderr, "cudaGetDeviceProperties failed!\n");
			return -1;
		}
		else
		{
			DeviceOutput(prop);
		}
	}
	return 0;
}